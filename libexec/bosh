#! /usr/bin/env bash
# Copyright 2014 Tom Regan
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

NAME=bosh
export BOSH_HOME=$([[ -z $BOSH_HOME ]] && {
                # take a guess at BOSH_HOME if the user hasn't set it
                CCD=${PWD}/${0}
                # did you give me the install location in the path?
                [[ ${CCD##*/} == $NAME ]] && {
                    BOSH_HOME=${PWD}/${0%/*}
                    # but wait! maybe we're in a leaf directory...
                    [[ ${BOSH_HOME##*/} == "bin" ]] && {
                        # I thought so! let's strip the 'bin' off
                        BOSH_HOME=${BOSH_HOME%/*}
                    } || {
                        echo ""
                    }
                    echo $BOSH_HOME
                }
} || echo $BOSH_HOME)

[[ -z $BOSH_HOME ]] && {
    echo -e "$NAME: set BOSH_HOME to the bosh install location\n\texport BOSH_HOME=..."
    exit 1
}
export BOSH_DEPLOY=$BOSH_HOME/etc/deploy


function require {
    local call=$1; shift
    source $BOSH_HOME/libexec/core/require/$call.sh $@
}


function install {
    local call=$1; shift
    local script=$BOSH_DEPLOY/$call.sh
    [[ ! -f $script ]] && {
        warn "No installer for $call"
    } || {
        source $script $@
    }
}


function configure {
    local package=$1; shift 2
    local configuration=$1; shift
    source $BOSH_HOME/etc/post_deploy/$package.sh 2> /dev/null && {
        $configuration $@ 2> /dev/null
    } || {
        fail "No such configuration '$configuration' for $package"
        exit 1
    }
}


function package {
    local call=$1; shift
    source $BOSH_HOME/libexec/core/package/$call.sh "$@"
}


function include {
    [[ -f $BOSH_HOME/$1 ]] && source $BOSH_HOME/$1 || {
        [[ -f $BOSH_HOME/$1.sh ]] && source $BOSH_HOME/$1.sh || {
            fail "'include $1' failed because $1 could not be found"
            exit 1
        }
    }
}
export -f require install configure package include


function init {
    source $BOSH_HOME/lib/out.sh
    source $BOSH_HOME/lib/environment.sh

    ARGS=$@
    for ARG in $ARGS; do
        [[ $ARG =~ [[:alnum:]]+@[[:alnum:]]+ ]] && {
            REMOTE=true
            break
        }
    done
    [[ -z $REMOTE ]] || {
        $BOSH_HOME/lib/remote.sh $ARGS
        exit 0
    }
}


function run {
    warn "Bosh is currently under development"
    if [[ -f $BOSH_HOME/etc/scripts/$1.bash ]]; then
        if [ -x $BOSH_HOME/etc/scripts/$1.bash ]; then
            $BOSH_HOME/etc/scripts/$1.bash
        else
            fail "$1.sh is not executable"
            exit 1
        fi
    elif [[ -f $BOSH_HOME/etc/scripts/$1.sh ]]; then
        if [ -x $BOSH_HOME/etc/scripts/$1.sh ]; then
            $BOSH_HOME/etc/scripts/$1.sh
        else
            fail "$1.sh is not executable"
            exit 1
        fi
    elif [[ -f $BOSH_HOME/etc/scripts/$1 ]]; then
        if [ -x $BOSH_HOME/etc/scripts/$1 ]; then
            $BOSH_HOME/run/$1
        else
            fail "$1 is not executable"
            exit 1
        fi
    else
        [[ -z $1 ]] && {
            fail "No script was specified"
        } || {
            fail "Script not found: $1"
        }
        exit 1
    fi
}

init $@

run $@
